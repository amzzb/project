
说明文档


密码安全检查协议的目标是通过保护用户隐私，在不泄露具体密码的前提下，计算密码泄露的次数。该协议模拟了一个客户端和服务器之间的安全交互过程，基于密码泄露数据库来检测客户端密码是否被泄露，同时确保用户的密码不被暴露给服务器。这个协议的核心是利用 Diffie-Hellman假设（DDH）和哈希技术保护数据的隐私。

 协议概要

该协议使用了三轮通信：
1. 第一轮：客户端使用一个随机密钥对其密码进行掩码处理，并将掩码后的哈希值发送给服务器。
2. 第二轮：服务器接收到客户端发送的掩码哈希值后，用自己的密钥对数据进行处理，并将其与泄露数据库中的数据进行对比，计算每个密码泄露的次数，并将加密后的数据发送回客户端。
3. 第三轮：客户端接收到来自服务器的加密数据后，计算交集并根据泄露密码的数量求和泄露次数，最终返回给服务器结果。

 协议步骤及数学推导

1 客户端操作

客户端密码列表：`client_passwords`，包括若干个密码。
客户端对每个密码进行哈希处理，然后进行掩码。掩码操作是通过随机生成的密钥 `k1` 来实现的。

数学表示：
H(p) → 哈希函数
掩码操作： masked_hash = H(p) ⊕ k1

其中：
`p` 为密码。
`k1` 是客户端的随机密钥。
`H(p)` 是密码的哈希值。

掩码后的哈希值 `masked_hash` 被发送给服务器。

2 服务器操作

服务器接收到客户端的掩码哈希值后，使用自己的密钥 `k2` 对数据进行处理，并与泄露数据库 `server_breach_db` 中的数据进行匹配。
服务器对数据库中的每个密码计算哈希并进行掩码操作。

数学表示：
H(p) → 哈希函数
masked_hash = H(p) ⊕ k2

服务器将 `masked_hash` 和对应的泄露次数发送回客户端。

3 客户端计算交集与泄露次数

客户端接收到服务器发送的掩码哈希值后，使用客户端的密钥 `k1` 对其进行还原。
客户端计算交集，即检查哪些密码在服务器的数据库中存在，并统计总泄露次数。

数学表示：
double_masked = masked_hash ⊕ k1

最终，客户端计算并返回泄露的密码数量和总泄露次数。

 协议实现

1 客户端操作流程

1. 客户端生成一个随机密钥 `k1`。
2. 对每个密码执行哈希运算，并进行掩码操作。
3. 将掩码后的密码列表发送给服务器。

2 服务器操作流程

1. 服务器生成一个随机密钥 `k2`。
2. 对泄露数据库中的每个密码执行哈希运算，并进行掩码操作。
3. 返回掩码后的密码和泄露次数。

3 客户端计算交集与泄露次数

1. 客户端接收服务器发送的数据。
2. 对数据执行还原操作。
3. 计算交集并统计泄露次数。

 安全性与隐私保护

隐私保护分析：
    服务器无法知道客户端的密码。
    客户端无法知道完整的泄露数据库。
    客户端和服务器仅交换聚合的统计信息，而非具体的密码数据。

密码学假设：基于 Diffie-Hellman困难问题 (DDH)，协议保证了密码和泄露次数的保护。

