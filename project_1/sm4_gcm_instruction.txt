SM4-GCM说明文档

GCM完整流程

GCM加密过程分为几个步骤。首先进行初始化，生成认证密钥H和初始计数器J0。如果初始向量长度为96位，则直接在后面附加32位的计数器；否则需要通过GHASH算法处理任意长度的初始向量。

加密阶段使用CTR模式，将计数器通过分组密码加密生成密钥流，然后与明文进行异或得到密文。计数器在每个分组后递增，确保每个分组使用不同的密钥流。

认证阶段首先处理附加认证数据AAD，然后处理密文数据，最后添加长度信息。所有这些数据通过GHASH算法生成认证标签，该标签与初始计数器的加密结果异或，得到最终的认证标签。

实现优化策略

查表优化

基础的S盒实现需要对每个字节进行查表操作，然后进行线性变换。T-table优化将S盒替换和线性变换预先组合，生成四个大的查找表。这样可以将原来的多步操作简化为四次查表和三次异或运算，显著提高了执行效率。

SIMD并行优化

现代处理器提供的SIMD指令集可以同时处理多个数据。通过使用SSE、AVX等指令集，可以实现多个分组的并行加密。AESNI指令集虽然专为AES设计，但其中的一些指令如字节序转换、并行异或等同样适用于SM4算法的优化。

AVX2指令集提供256位寄存器，可以同时处理8个SM4分组，进一步提高并行度。GFNI指令集提供了有限域运算支持，虽然主要用于AES，但经过适当修改也可以用于SM4的S盒实现。

 GHASH硬件加速

PCLMULQDQ指令专门用于有限域上的无进位乘法运算，可以显著加速GHASH计算。该指令能够并行执行128位数据的有限域乘法，避免了软件实现中的循环和条件判断，大幅提升了GCM模式的性能。

 自适应算法选择

考虑到不同平台和处理器的能力差异，实现中采用了自适应选择策略。程序启动时检测CPU支持的指令集特性，然后根据数据量大小和可用指令集选择最优的实现方案。对于大量数据优先使用高并行度算法，对于小量数据则选择延迟较低的基础算法。
