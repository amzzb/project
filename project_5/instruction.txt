SM2实现及优化说明文档

1. ECDSA（椭圆曲线数字签名算法）

数学推导
椭圆曲线点加法和倍加：椭圆曲线上的点加法是通过特定的公式计算出的。通过对点进行加法或倍加操作，可以生成新的签名。使用的关键公式如下：
  点加法公式：通过点 P 和 Q 的坐标，计算出点 R = P + Q。
  点倍加公式：计算 2P = P + P，用于加速计算。

签名生成
1. 选择私钥：生成一个随机数 k。
2. 计算签名：
   r 是通过点乘操作得到的 r = x1 mod n（其中 x1 是标量 k 和基点的乘积的横坐标）。
   s 使用 s = k^(-1) · (z + r · d) mod n 计算，其中 z 是消息的哈希值，d 是私钥。

签名验证
验证签名：验证签名是否有效的核心在于验证计算出的 r 和 s 是否符合椭圆曲线上的约束。

2. SM2（国密算法）

数学推导
1. 椭圆曲线定义：SM2使用的椭圆曲线方程为：
   y^2 = x^3 + ax + b mod p
   其中 a、b 和 p 是曲线的参数。
2. 签名生成：
   计算消息 M 的哈希值 e。
   计算签名：
     r = (e + x1) mod n。
     s = (k^(-1) · (k - r · d)) mod n，其中 d 是私钥，k 是随机数。

签名验证
验证过程：通过以下公式验证签名的正确性：
   计算 t = (r + s) mod n，检查 t 是否为零。
   通过椭圆曲线的点加法计算验证点，检查 r 是否等于验证点的横坐标。

身份标识和消息摘要
ZA计算：利用用户身份标识、椭圆曲线参数以及公钥信息，计算用户的身份标识。
消息哈希：采用 SM3 哈希算法对消息进行处理。

3. PoC（攻击演示）

概述
PoC 文件展示了 SM2签名 在 随机数泄漏 和 k重复使用 等情况下的攻击演示。通过这类攻击，私钥信息可能会泄露。

攻击类型
1. 随机数泄漏：
   如果攻击者知道签名过程中使用的随机数 k，可以通过以下公式恢复私钥：
     d = (k - s) · (s + r)^(-1) mod n
2. 重复使用随机数 k：
   如果在不同的消息签名中使用了相同的随机数 k，攻击者可以通过解方程恢复私钥。

3. 不同用户使用相同的 k：
   多个用户（如 Alice 和 Bob）使用相同的 k 进行签名，攻击者可以通过恢复其中一个用户的私钥进而推算出另一个用户的私钥。

攻击实现
通过反向推导攻击者使用泄露的 k 恢复私钥，从而绕过签名验证。
