
数字水印系统说明文档

1. 数字水印嵌入算法

1.1 算法流程

水印嵌入过程分为以下几个主要步骤：
1. 读取图像：读取待处理图像并将其转换为 YUV 色彩空间，选择 Y 通道作为嵌入水印的目标通道。
2. 文本转换为二进制：将水印文本转换为二进制字符串。
3. 计算水印嵌入位置：确定嵌入水印的位置，选择图像的中频 DCT 系数位置，以保证最小的视觉影响。
4. DCT 变换：对每个 8x8 块应用离散余弦变换，将图像从空间域转换到频率域。
5. 嵌入水印：在 DCT 变换后的系数中，根据二进制水印数据调整对应位置的值。
6. 逆 DCT 变换：对修改后的 DCT 块进行逆变换（IDCT），恢复修改后的图像。
7. 保存水印图像：将处理后的图像保存为新的图像文件。

1.2 数学推导与表示

- DCT 变换：DCT 将图像从空间域转换到频率域，使得图像数据能够用不同的频率成分表示。对于一个 8x8 块的图像块 X，其 2D DCT 变换可以表示为：

Y_{u,v} =  lpha(u)  lpha(v) \sum_{x=0}^{7} \sum_{y=0}^{7} X_{x,y} \cos\left[ rac{(2x+1)u\pi}{16} 
ight] \cos\left[ rac{(2y+1)v\pi}{16} 
ight]

其中，Y_{u,v} 为 DCT 系数， lpha(u) 和  lpha(v) 是归一化常数，X_{x,y} 为原始图像块。

水印嵌入：水印通过对 DCT 中的中频系数（例如 Y_{2,3} 或 Y_{3,4} 等）进行微调实现。假设水印为二进制位 b_i，嵌入的 DCT 系数 Y_{u,v} 会根据 b_i 的值进行如下调整：

Y_{u,v} = 
  { Y_{u,v} +  lpha \cdot |Y_{u,v}|, & 	ext{if } b_i = 1
  Y_{u,v} -  lpha \cdot |Y_{u,v}|, & 	ext{if } b_i = 0 }

其中， lpha 为水印强度，控制水印的嵌入程度。

2. 水印提取算法

2.1 算法流程

水印提取过程包括以下步骤：
1. 读取水印图像：读取已经嵌入水印的图像并转换为 YUV 色彩空间，选择 Y 通道进行提取。
2. DCT 变换：对图像的每个 8x8 块进行 DCT 变换。
3. 提取水印：根据水印嵌入时的 DCT 位置，判断相应的 DCT 系数的符号，提取出二进制水印数据。
4. 二进制转文本：将提取的二进制数据转换回文本，得到提取的水印。

2.2 数学推导与表示

提取水印的核心思想是，通过对 DCT 系数的符号判断来恢复水印的二进制数据：

符号提取：通过判断 DCT 系数的符号来确定水印位：

b_i = 
  { 1, & 	ext{if } Y_{u,v} > 0
  0, & 	ext{if } Y_{u,v} \leq 0 }

其中，Y_{u,v} 是提取的 DCT 系数。

3. 鲁棒性测试

为了验证水印系统的鲁棒性，系统提供了几种常见的图像处理攻击，测试水印的稳定性：
JPEG 压缩：使用不同的压缩质量对图像进行压缩，检查水印的提取情况。
高斯噪声：向图像中添加高斯噪声，测试水印在噪声干扰下的提取效果。
对比度调整：对图像进行对比度调整，测试水印是否能在对比度变化后被正确提取。

4. 实现思路

4.1 水印嵌入

图像处理：首先使用 OpenCV 读取图像并将其转换为 YUV 色彩空间。水印嵌入只对 Y 通道进行操作，因为该通道对视觉质量的影响最小。
DCT 嵌入：通过对每个 8x8 块进行 DCT 变换，将水印二进制数据嵌入到中频 DCT 系数中。嵌入的强度由 alpha 控制。
图像恢复：修改后的 DCT 系数经过 IDCT 逆变换，恢复成水印图像。

4.2 水印提取

DCT 提取：从水印图像中提取 DCT 系数，并通过符号判断恢复水印的二进制数据。
二进制转换：提取到的二进制数据通过 _binary_to_text() 方法转换为原始水印文本。

4.3 鲁棒性测试

图像变换：对水印图像进行翻转、噪声添加、JPEG 压缩等常见变换，测试水印的提取效果。每次攻击后，使用 calculate_correlation() 计算提取水印与原始水印之间的相关系数，衡量水印的鲁棒性。
